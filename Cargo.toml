[package]
name = "wrapped_mono"
version = "0.1.2"
edition = "2021"
links = "mono-2.0"
license = "MIT"
description = "Wrapper around mono library. Allows easy loading and interop between code written for the .NET framework and rust."
repository = "https://github.com/FractalFir/wrapped_mono"
readme = "README.md"
keywords = [".NET","mono","C#","F#"]
categories = ["api-bindings"]
authors = ["FractalFir <fractalfirdev@gmail.com>"]

[build-dependencies]
bindgen = {version = "0.60.1",optional = true}
[dependencies]
wrapped_mono_macros = {path = "src/wrapped_mono_macros",version = "0.1.1"} # Macros used by wrapped_mono
document-features = "0.2.3" # Used for documenting features of this crate
lazy_static = "1.4.0" # Used for certain class types
[dev-dependencies]
rusty-fork = "0.3.0"
bencher = "0.1.5"
[workspace]
members = ["src/wrapped_mono_macros"]
[features]
default = ["referneced_objects"]
## Disables boxing/unboxing safety checks. Normally, when an object is unboxed, it's type is checked to prevent crashes and errors. Enabling unsafe_unboxing will make wrapped_mono assume that type given by the user is always correct.
unsafe_boxing = []
## Disables array safety checks. Normally, when an array is created, it will make checks to ensure that its managed type matches its unmanaged type.
unsafe_arrays = []
## Disables all safety checks to slightly speed `wrapped_mono` up. Gains are usually negligible and potential errors will have more cryptic messages(Segfaluts instead of failed assertions).  USE WITH CAUTION.
unsafe_speedup = ["unsafe_boxing","unsafe_arrays"]
## Build test dlls. Enable only for tests, if you want to change test .cs files.
build_test_dlls = []
## Regenerates bindings for mono library
regen_binds = ["bindgen"]
## Dumps code created as results of macros into "macro.dump" file. Use for debugging when macros do not behave as expected.
dump_macro_results = ["wrapped_mono_macros/dump_macro_results"]
## Prevents objects in use by rust from being removed by mono runtime, adds slight overhead but is essential for storing objects long term. Can be disabled, but disabling it forces manual management of object lifetimes using GC handles.
referneced_objects = []
